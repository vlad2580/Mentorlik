spring:
    application:
        name: mentorlik-backend

    datasource:
        url: jdbc:postgresql://${POSTGRES_HOST:localhost}:${POSTGRES_PORT:5434}/mentorlik_db
        driver-class-name: org.postgresql.Driver
        username: ${DB_USERNAME:mentorlik_user}
        password: ${DB_PASSWORD:mentorlik_password}

    jpa:
        hibernate:
            ddl-auto: update
        show-sql: false
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect

    # Mail configuration for sending verification emails
    mail:
        host: ${MAIL_HOST:smtp.gmail.com}
        port: ${MAIL_PORT:587}
        username: ${MAIL_USERNAME:your-email@gmail.com}
        password: ${MAIL_PASSWORD:your-app-password}
        properties:
            mail:
                smtp:
                    auth: true
                    starttls:
                        enable: true

    # Redis конфигурация закомментирована, так как пока не используется
    # cache:
    #  type: redis
    # redis:
    #  host: ${REDIS_HOST:redis}
    #  port: ${REDIS_PORT:6379}

    # Конфигурация OAuth2 серверов
    security:
        oauth2:
            client:
                registration:
                    google:
                        client-id: ${GOOGLE_CLIENT_ID:disabled}
                        client-secret: ${GOOGLE_CLIENT_SECRET:disabled}
                        scope: openid, profile, email
                        redirect-uri: '{baseUrl}/login/oauth2/code/google'
                        authorization-grant-type: authorization_code
                    linkedin:
                        client-id: ${LINKEDIN_CLIENT_ID:disabled}
                        client-secret: ${LINKEDIN_CLIENT_SECRET:disabled}
                        scope: r_liteprofile, r_emailaddress
                        redirect-uri: '{baseUrl}/login/oauth2/code/linkedin'
                        authorization-grant-type: authorization_code
                        provider: linkedin
                provider:
                    google:
                        authorization-uri: https://accounts.google.com/o/oauth2/auth
                        token-uri: https://oauth2.googleapis.com/token
                        user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
                        user-name-attribute: sub
                    linkedin:
                        authorization-uri: https://www.linkedin.com/oauth/v2/authorization
                        token-uri: https://www.linkedin.com/oauth/v2/accessToken
                        user-info-uri: https://api.linkedin.com/v2/me
                        user-name-attribute: id

# Настройки Elasticsearch
elasticsearch:
    host: ${ELASTICSEARCH_HOST:localhost}
    port: ${ELASTICSEARCH_PORT:9200}

# Настройки JWT
jwt:
    secret: ${JWT_SECRET:veryLongAndSecureSecretKeyForJwtTokenGenerationInDevelopment}
    expiration: ${JWT_EXPIRATION:86400000} # 24 часа в миллисекундах

# Application-specific settings
app:
    url: ${APP_URL:http://localhost:80}

# Эндпоинт здоровья для Docker health checks
management:
    endpoints:
        web:
            exposure:
                include: health,info
    endpoint:
        health:
            show-details: always

# Настройки логирования
logging:
    level:
        root: INFO
        com.mentorlik: INFO
        org.springframework.security: INFO
